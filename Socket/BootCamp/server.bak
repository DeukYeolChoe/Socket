#include <stdio.h>
#include <stdlib.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <string.h>
#include <unistd.h>
#include <errno.h>
#include <signal.h>

#include "server.h"
#include "validation.h"
#include "log.h"
#include "parser.h"

//struct httpbody
//{
//	char *method;
//	char *host;
//	char *connection;
//	int contentLength;
//	char *cache_control;
//	char *accept;
//	char *origin;
//	char *user_agent;
//	char *content_type;
//	char *referer;
//	char *accept_encoding;
//	char *accept_language;
//	char *query_string;
//};
//typedef struct httpbody Httpbody;

int setCommand(char *fileName)
{
		int cmd = -1;
		char *cmp;
		cmp = strdup(fileName);
	
		if (isValidImgExtension(cmp) == -1)
		{
			//404 not found
			return 1;
		}
		else if (strcmp(cmp, "bad") == 0)
		{
			// 400 bad request
			return 0;
		}
		else
			return 2;
}

void send_binary(int socket, FILE *picture)
{
	int size, read_size, stat, packet_index;
	char send_buffer[SIZE];
	char read_buffer[SIZE];
	packet_index = 1;

	//According to TutorialsPoint website,
	//fseek(FILE *stream, long int offset, int whence) sets the file position of the stream to the given offset
	//SEEK_END: end of file
	//SEEK_SET: Beginning of file
	//ftell(FILE *stream) returns the current file position of the given stream 	
	fseek(picture, 0, SEEK_END);
	size = ftell(picture);
	fseek(picture, 0, SEEK_SET);
	printf("Total Picture Size: %d\n", size);
	printf("Sending Picture as Byte Array\n");
	
	while (!feof(picture))
	{
		read_size = fread(send_buffer, 1, sizeof(send_buffer)-1, picture);
		do
		{
			//stat = write(socket, send_buffer, read_size);
			stat = send(socket, send_buffer, read_size, 0);	
		} while(stat < 0);
	
		//printf("Packet Number: %d\n", packet_index);
		//printf("Packet Size sent: %d\n", read_size);
		//printf("\n\n");
		//packet_index++;
		bzero(send_buffer, sizeof(send_buffer));
	}
	printf("Completed!\n");
}

void response(int client_socket, char* fileName, int cmd)
{
	char *status;
	char *stat_msg;
	char curDirectory[SIZE];
	char line[SIZE];
	FILE *fileReader;
	
	switch(cmd)
	{
		case 0:
			status = strdup("HTTP/1.1 400 Bad request\r\n\r\n");
			stat_msg = strdup("<html><h1>400 Bad request</h1></html>");
			send(client_socket, status, strlen(status), 0);
			send(client_socket, stat_msg, strlen(stat_msg), 0);
			break;
		case 1:
			getcwd(curDirectory, SIZE);
			strncat(curDirectory, "/", strlen("/"));
			strncat(curDirectory, fileName, strlen(fileName));
			printf("server: (curDirectory) %s\n", curDirectory);
			fileReader = fopen(curDirectory, "r");
			
			if (fileReader == NULL)
			{
				status = strdup("HTTP/1.1 404 Not found\r\n\r\n");
				stat_msg = strdup("<html><body><h1>404 Not found</h1></body></html>");
				send(client_socket, status, strlen(status), 0);
				send(client_socket, stat_msg, strlen(stat_msg), 0);
			}
			else
			{
				status = strdup("HTTP/1.1 200 OK \n\n");
				if (send(client_socket, status, strlen(status), 0) == -1)
					error("send");
				while (fgets(line, sizeof(line), fileReader) != NULL)
				{
					if (send(client_socket, line, strlen(line), 0) == -1)
						error("send");
				}
			}
			break;
		case 2:
			//Send a file
			fileReader = fopen(fileName, "rb");
			printf("Getting Picture Size\n");
			if (fileReader == NULL)
			{
				status = strdup("HTTP/1.1 404 Not found\r\n\r\n");
				stat_msg = strdup("<html><body><h1>404 Not found</h1></body></html>");
				send(client_socket, status, strlen(status), 0);
				send(client_socket, stat_msg, strlen(stat_msg), 0);
			}			
			else
			{
				status = strdup("HTTP/1.1 200 OK \n\n");
				if (send(client_socket, status, strlen(status), 0) == -1)
					error("send");
				send_binary(client_socket, fileReader);
			}			
			break;
		default:
			makeLog("response: invalid cmd\n");
			error();
	}
}

int makeServer(struct sockaddr_in *server_addr)
{
	//int server_sockfd;
	//if ((server_sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0)
	//{	
	//	makeLog("server: socket()\n");
	//	error();
	//}

	//if ((setsockopt(server_sockfd, SOL_SOCKET, SO_REUSEADDR, &(int) { 1 }, sizeof(int))) < 0)
	//{
	//	makeLog("server: setsockopt()\n");
	//	error();
	//}
	//
	//if (bind(server_sockfd, (struct sockaddr *) &server_addr, sizeof(server_addr)) < 0)
	//{
	//	makeLog("server: bind()\n");
	//	error();	
	//}
	return 1;
}

void processCGI(Httpbody httpInfo, int socket, char* method)
{
	int fd1[2], fd2[2], nbytes;
	pid_t pid2;
	char readbuffer[SIZE] = {'\0',};
	char *status;
	pipe(fd1);
	pipe(fd2);
	
	printf("REQUEST_METHOD: [%s]\n", method);
	printf("QUERY_STRING: [%s]\n", httpInfo.query_string);
	printf("CONTENT_LENGTH: [%s]\n", getContentLength(httpInfo.contentLength));
	setenv("REQUEST_METHOD", method , 1);
	setenv("QUERY_STRING", httpInfo.query_string, 1);
	setenv("CONTENT_LENGTH", getContentLength(httpInfo.contentLength), 1);
	fflush(1);//clean the buf
	pid2 = fork();
	
	if (pid2 == 0)
	{//A child process
		close(fd1[1]);
		dup2(fd1[0], 0);//STDIN
		close(fd2[0]);
		dup2(fd2[1], 1);//STDOUT

		//execl("/home/deukyeolchoe/Socket/BootCamp/calendar.cgi", NULL);
		execl("calendar.cgi", NULL);
	}
	else if (pid2 > 0)
	{//A parent process
		close(fd1[0]);
		dup2(fd1[1], 1);
		close(fd2[1]);
		dup2(fd2[0], 0);
		printf("%s\n", httpInfo.query_string);
		
		while (nbytes = read(0, readbuffer, SIZE) > 0)
		{
			//status = strdup("HTTP/1.1 200 OK \n\n");
			//send(socket, status, strlen(status), 0);
			write(socket, readbuffer, nbytes);
			//printf("parent: I got msg [%s] from a child\n",readbuffer);
		}
		//send(client_sockfd, readbuffer, strlen(readbuffer), 0);
	}
	perror("DONE");
}

int server(char *port)
{
	Httpbody httpInfo;
	struct sockaddr_in client_addr, server_addr;
	int server_sockfd, client_sockfd;
	int state, client_len;
	pid_t pid;
	int server_port;
	int cmd;
	char buffer[SIZE];
	char *fileName;
	char *method;
	char *status;

	server_port = atoi(port);
	if (server_port)
	{
		server_port = atoi(port);
	}
	else
	{
		makeLog("server: server port\n");
		error();
	}

	bzero(&server_addr, sizeof(server_addr));
	server_addr.sin_family = AF_INET;
	server_addr.sin_addr.s_addr = INADDR_ANY;
	server_addr.sin_port = htons(server_port);

	if ((server_sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0)
	{
		makeLog("server: socket()\n");
		error();
	}

	if ((setsockopt(server_sockfd, SOL_SOCKET, SO_REUSEADDR, &(int) { 1 }, sizeof(int))) < 0)
	{
		makeLog("server: setsockopt()\n");
		error();
	}
	
	if (bind(server_sockfd, (struct sockaddr *) &server_addr, sizeof(server_addr)) < 0)
	{
		makeLog("server: bind()\n");
		error();	
	}

	state = listen(server_sockfd, BACKLOG);
	printf("server: waiting for request!!\n");

	if (state == -1)
	{
		makeLog("server: listen()\n");
		error();	
	}
	
	signal(SIGCHLD, SIG_IGN);
	while (1)
	{
		client_len = sizeof(client_addr);
		
		//Accept method does not return until a remote client has established a connection
     		client_sockfd = accept(server_sockfd, (struct sockaddr *) &client_addr, &client_len);
    		if (client_sockfd < 0)
		{ 
          		makeLog("server: accept()\n");
			error();
		}
		
		pid = fork();
		//pid = 0;
		if (pid == 0)
		{//A child process
			while (1)
			{
				bzero(buffer, SIZE);
				if ((recv(client_sockfd, buffer, sizeof(buffer), 0)) < 0)
				{
					makeLog("server: recv()\n");
					error();
				}
				else
				{
					printf("\nserver: I have recevied: \n[%s]\n\n", buffer);
					httpInfo = parseHttpbody(buffer);
					method = getHttpMethod(httpInfo.method);
					if (strcmp(method, "GET") == 0)
					{
						printf("server: GET\n");
						fileName = getFileName(httpInfo.method, 0);
					}	
					else if(strcmp(method, "POST") == 0)
					{
						printf("server: POST\n");
						fileName = getFileName(httpInfo.method, 1);
						// get post length
					}	
					printf("server: (fileName) %s\n", fileName);
					cmd = setCommand(fileName);
					printf("server: (cmd): %d\n", cmd);
					
					if (isCgiScript(fileName) == 1)
					{
						printf("cgi running\n");
						status = strdup("HTTP/1.1 200 OK \n\n");
						send(client_sockfd, status, strlen(status), 0);
						processCGI(httpInfo, client_sockfd, method);
					}
					else
					{
						response(client_sockfd, fileName, cmd);
					}
					
					printf("server: socket closing\n");
					close(client_sockfd);
				}
				exit(0);
			}		
		}
		else if (pid > 0)
		{
			wait(NULL);
			close(client_sockfd);
		}
		else if (pid == -1)
		{
			makeLog("server: pid == -1\n");
			error();
		}
	}
}
